{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Practicalli Clojure Data Science","text":"<p>Alpha stage book</p> <p>Currently the book is a collection of various external references with a small amount of commercial experience captured.</p> <p>A guide to writing services and applications in the context of data science</p> <p>Topics will include data mining, data transformation and visualisation tools, techniques and libraries.  Guides will take a story telling approach using visualisation tools to ensure a meaningful context in which design decisions are taken.</p> <p>A starting point for Clojure developers on their journey into Data Science.  As Data Science is such a vast subject area, no one resource can cover such diversity, so this guide will recommend numerous resources that go far deeper into specific areas.</p> <p>This guide does not claim to make any attempt to teach you how to be a professional data scientist.</p>"},{"location":"#data-mining","title":"Data Mining","text":"<ul> <li>scraping unstructured data sources</li> <li>consuming open API data sources</li> <li>highlighting reputable and high quality data sources</li> </ul>"},{"location":"#data-transformation","title":"Data Transformation","text":"<ul> <li>writing services and applications in the context of data science.</li> </ul>"},{"location":"#story-telling-with-data","title":"Story telling with data","text":"<ul> <li>Visualisation of data</li> </ul>"},{"location":"#data-science-theory","title":"Data Science theory","text":"<ul> <li>Statistics and probability</li> <li>Linear Algebra</li> <li>Mathematical Optimisation</li> <li>Calculus</li> </ul> <p>Future topics</p> <ul> <li>Trend analysis</li> <li>Principle component analysis</li> <li>Basic Modelling (for machine learning)</li> <li>Time series tidyverts</li> <li>Data generation - examples of how to generate sample data</li> <li>Data sources - what are good data sources and what concepts are they good for exploring</li> <li>Identify and simply explain data science concepts and provide understanding / examples of how they can be valuable</li> </ul>"},{"location":"#clojure-libraries-for-data-science","title":"Clojure libraries for data science","text":"<ul> <li>Tablecloth</li> <li>dtype-next</li> <li>tech.viz</li> <li>Oz</li> <li>Hanami</li> </ul>"},{"location":"#integration-with-data-science-tools","title":"Integration with data science tools","text":"<ul> <li> libpython-clj - Deep Clojure/Python Integration</li> <li> Extending Clojure with Python - Chris Nuernberger</li> </ul>"},{"location":"#example-projects","title":"Example projects","text":"<ul> <li> <p>Simple Covid19 dashboard - import data from CSV, simple data wrangling and creating a website dashboard using Oz for a vega-lite based visualisation and CSS for highlighting specific data points</p> </li> <li> <p>Oz Visualisation examples - learn some of the capabilities of Oz and demonstrate how to create a range of visualisations</p> </li> <li> <p>Ascii visualisation</p> </li> <li> <p>Visualising survey data - take a survey such as</p> </li> </ul>"},{"location":"#scicloj-community","title":"SciCloj community","text":"<p>A community of people using Clojure and other tools to create amazing things in the realm of science</p> <ul> <li>Homepage</li> <li> SciCloj YouTube channel</li> <li>GitHub repository</li> <li>SciCloj discussions on Zulip Clojurians</li> </ul>"},{"location":"#resources","title":"Resources","text":"<ul> <li>Interactive Programming for Artificial Intelligence - learn artificial intelligence programming skills</li> <li>dragan.rocks - articles on data science with Clojure</li> <li>clojuredatascience.com - Henry Garner</li> </ul>"},{"location":"#navigate-the-book","title":"Navigate the book","text":"<p>Use the mouse or built-in key bindings to navigate the pages of the book</p> <ul> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>Use the search box to quickly find a specific topic</p> <ul> <li>F , S , / : open search dialog</li> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search dialog</li> <li>Enter : follow selected result</li> </ul>"},{"location":"#sponsor-practicalli","title":"Sponsor Practicalli","text":"<p>All sponsorship recieved is used to maintain and further develop the Practicalli series of books and videos, although most of the work is still done with my own time and cost.</p> <p>Thank you to Cognitect, Nubank and a wide range of other sponsors for your continued support</p>"},{"location":"#creative-commons-license","title":"Creative commons license","text":"This work is licensed under a Creative Commons Attribution 4.0 ShareAlike License (including images &amp; stylesheets)."},{"location":"artificial-intelligence/","title":"Artificial Intelligence","text":"<p>Neural networks are a collection of predicate functions that are assembled into a network</p> <p>AI is the future we are trying to build machine learning, neural networks, natural language programming are the practical tools and approaches that we are applying to solve AI</p>"},{"location":"assets/images/social/","title":"Social Cards","text":"<p>Social Cards are visual previews of the website that are included when sending links via social media platforms.</p> <p>Material for MkDocs is configured to generate beautiful social cards automatically, using the colors, fonts and logos defined in <code>mkdocs.yml</code></p> <p>Generated images are stored in this directory.</p>"},{"location":"collaborative-coding/","title":"Collaborative Coding","text":"<ul> <li>Shared REPL Server</li> </ul>"},{"location":"collaborative-coding/shared-repl-server/","title":"Shared REPL server","text":"Create a remote serve <p>Define how to create a suitable remote server on AWS, Google, etc.</p> <p>Switch off Server when done</p> <p>Dont forget to switch the server off when not in use to avoid additional costs</p>"},{"location":"collaborative-coding/shared-repl-server/#install-clojure","title":"Install Clojure","text":"<p>Use the Clojure.org Getting Started instructions to download Clojure for Linux and run the install script.  This installs <code>clojure</code> command system wide (<code>/usr/local/bin/</code>) along with the <code>clj</code> wapper that runs a terminal REPL using <code>rlwrap</code> (TODO: check rlwrap is installed).</p> <p>Use a range of community tools by installing the practicalli/clojure-deps-edn configuration (first deleting the <code>~/.clojure</code> directory if it exists - create if you run <code>clojure</code> or <code>clj</code> for the first time)</p> <pre><code>git clone https://github.com/practicalli/clojure-deps-edn.git ~/.config/clojure/\n</code></pre> <p>Created a new project on the remote server using a Clojure project templates.  For example a simple command line application</p> <pre><code>clojure -X:project/create :template app :name practicalli/science-is-fun\n</code></pre>"},{"location":"collaborative-coding/shared-repl-server/#run-repl-with-nrepl-server","title":"Run REPL with nREPL server","text":"<p>Start a REPL process with an nREPL server to connect a Clojure aware editor.</p> <p>The REPL process can be started with a rich terminal UI if actively using the REPL prompt.  Or as a simple prompt with only command history or even as a headless process.</p> Rich Terminal UIHeadless REPL processSimple Built-in REPL <p>Run a feature rich terminal REPL using the <code>:repl/rebel</code> alias from Practicalli Clojure CLI Config <pre><code>clojure -M:repl/rebel\n</code></pre></p> <p>Run a non-interactive 'headless' REPL process if all the interaction is to be done via a Clojure aware editor</p> <p>Use the <code>:repl/headless</code> alias from Practicalli Clojure CLI Config <pre><code>clojure -M:repl/headless\n</code></pre></p> <p>Run the REPL process with the simple prompt provided with Clojure CLI if resources are very constrained.  The <code>clj</code> wrapper requires <code>rlwrap</code> binary to be available on the operating system execution path <pre><code>clj\n</code></pre></p>"},{"location":"collaborative-coding/shared-repl-server/#configure-ssh-connection","title":"Configure SSH connection","text":"<p>Generate a permissions file, <code>.pem</code> from the server (TODO: how to generate .pem files) and save it to <code>~/.ssh/</code> directory (or your preferred location).</p> <p>Edit the <code>~/.ssh/config</code> file (create the file if needed) and add a host configuration for the remote server.</p> <p>Add the IP address of the remote server to <code>HostName</code>.</p> <p>Use the <code>LocalForward</code> for the port used by the nREPL server.</p> <pre><code>Host remote-clojure-server\n  HostName 99.99.99.99\n  IdentityFile ~/.ssh/remote-server.pem\n  User ubuntu\n  PasswordAuthentication yes\n  LocalForward 1234 localhost:1234\n  Port 22\n</code></pre>"},{"location":"collaborative-coding/shared-repl-server/#start-repl-with-editor-support","title":"Start REPL with Editor support","text":"<p>The majority of Clojure aware editors can connect to an external REPL using the nREPL protocol.  Emacs CIDER, VSCode Calva and NeoVim Conjure all use nREPL and the Cider middleware.</p> <p>The <code>:middleware/cider-clj</code> will inject the nREPL and Cider middleware libraries.</p> <p>SSH into the remote server.</p> <p>Change to a Clojure project</p> <p>Start the REPL using the cider middleware on the same port as defined in <code>LocalForward</code> in the SSH configuration, using the <code>-p</code> to set the port number.</p> <pre><code>clojure -M:middleware/cider-clj -p 1234\n</code></pre>"},{"location":"collaborative-coding/shared-repl-server/#configure-emacs","title":"Configure Emacs","text":"<p>Emacs can be used to connect to a running Clojure project that has been run with the nREPL and Cider middleware, e.g. <code>:middleware/cider-clj</code> from <code>practicalli/clojure-deps-edn</code></p> <p>Edit your Emacs <code>~/.emacs.d/init.el</code> file and add the following configuration.</p> <p>For Spacemacs, edit <code>~/.spacemacs</code> and add the following code to <code>dotspacemacs/user-config</code></p> <pre><code>(setq nrepl-use-ssh-fallback-for-remote-hosts t)\n</code></pre>"},{"location":"collaborative-coding/shared-repl-server/#neovim-conjure-on-remote-server","title":"NeoVim Conjure on remote server","text":"<p>NeoVim and Conjure are installed on the remote server using the Practicalli install guide.</p> <p>Conjure will automatically connect to a running REPL</p> <p>Conjure uses .nrepl-port</p> <p>Conjure looks for the <code>.nrepl-port</code> in the root of the project.  If this file is not created when running the REPL, create the file and use the same value as <code>LocalForward</code> from the SSH configuration.</p>"},{"location":"collaborative-coding/shared-repl-server/#apache-httpd-server-reverse-proxy","title":"Apache HTTPd server reverse proxy","text":"<p>Use a reverse proxy if you wish to expose visualizations via a browser, such as Oz or notespace.</p> <p>ssh into the remote server with an account that has sudo privileges</p> <p>Enable the reverse proxy module <code>mod_proxy_http</code> which has a dependency on <code>mod_proxy</code> and is also enabled automatically.</p> <pre><code>sudo a2enmod proxy_http\n</code></pre> Modules are part of the Ubuntu Apache install <p>Proxy modules are already part of the Apache2 package install on Ubuntu, so additional package install is not required</p> <p>Create a new configuration by copying the <code>/etc/apache2/sites-available/000-default.conf</code> to <code>/etc/apache2/sites-available/reverse-proxy.conf</code>.  This ensures you have a working backup if the configuration breaks or you wish to quickly switch back to a non-proxy configuration.</p> <p>Edit <code>/etc/apache2/sites-available/reverse-proxy.conf</code> and add the following configuration inside the <code>VirtualHost</code> directive <pre><code>     ProxyRequests Off\n     ProxyPass \"/\" \"http://localhost:8080/\"\nProxyPassReverse \"/\" \"http://localhost:8080/\"\n</code></pre></p> <p><code>sudo a2ensite reverse-proxy</code> to enable the reverse-proxy configuration, which adds a symbolic link in the <code>/etc/apache2/sites-enabled/</code> directory (all configurations in this directory are included via <code>/etc/apache2/apache2.conf</code>)</p> <p>Disable the other sites so that they do not over-ride the reverse proxy configuraion.  This simply removes the symbolic link from sites-enabled directory, their configuration is still in the sites-available directory.</p> <pre><code>sudo a2dissite scicloj\nsudo a2dissite 000-default\n</code></pre> <p><code>sudo systemctl restart apache2</code> to restart apache http server with the reverse proxy configuration</p> <p>To use a number of projects or visualisation tools, update the <code>/etc/apache2/sites-available/reverse-proxy.conf</code> and add more <code>ProxyPass</code> and <code>ProxyReverse</code> directives</p> <pre><code>     ProxyPass \"/oz\" \"http://localhost:8080/\"\nProxyPassReverse \"/oz\" \"http://localhost:8080/\"\nProxyPass \"/notespace\" \"http://localhost:8181/\"\nProxyPassReverse \"/notespace\" \"http://localhost:8181/\"\n</code></pre> <p>Oz only working on <code>/</code></p> <p>Using the reverse proxy configuration so far, Oz will only render the server page and not the views.  It is assumed that this is because of web sockets and will need to enable the mod proxy module for websockets too.</p>"},{"location":"collaborative-coding/shared-repl-server/#references","title":"References","text":"<ul> <li>https://httpd.apache.org/docs/2.4/mod/mod_proxy_wstunnel.html</li> <li>https://www.serverlab.ca/tutorials/linux/web-servers-linux/how-to-reverse-proxy-websockets-with-apache-2-4/</li> <li>https://websiteforstudents.com/configure-reverse-proxies-using-apache2-http-server-on-ubuntu-18-04/</li> </ul>"},{"location":"data-mining/","title":"Data Mining","text":"<p>The data required is often not provided in an easily consumable form, referred to as unstructured data.</p> <p>Data mining techniques like web-scraping and Extra-Transform-Load (ETL) tools can turn unstructured data into something useful.</p> <p>The clojure.core library has a wide range of functions for transforming data into the right shape, as the Clojure language is a data structure.</p>"},{"location":"data-mining/webscraping/","title":"Web Scraping unstructured data","text":""},{"location":"data-mining/webscraping/#complexity-of-javascript-websites","title":"Complexity of JavaScript websites","text":"<ul> <li>Sparkledriver</li> </ul>"},{"location":"data-mining/webscraping/#tools","title":"Tools","text":"<ul> <li>Enlive</li> <li>Scoopi - a tool to extract and transform data from web pages</li> <li>demeter - fast, concurrent web scraper with headless JavaScript execution</li> <li>web-scraper - library with fairly good JavaScript support</li> <li>Web Page Summarizer - gui for getting web pages and summarizing them. Demonstrates enlive and compojure</li> <li>Scraper - JavaFX web engine and WebKit</li> <li>Abrade - scraping web sites, even ones that heavily rely on Javascript. The Java HtmlUnit library is used under the hood</li> <li>Etaoin - Clojure implementation of webdriver protocol</li> </ul>"},{"location":"data-mining/webscraping/#example-projects","title":"Example projects","text":"<ul> <li>parkrun-app - enlive</li> <li>clj-scraper - enlive, http-kit, core.async</li> <li>ldnpyvideo - Scraper (from pyvideo.org) and web site for London PyCon video meetup</li> <li>nba-scraper - scraping NBA boxscore data from ESPN</li> <li>Clojure web scraping with Enlive</li> </ul>"},{"location":"data-mining/webscraping/#references","title":"References","text":"<ul> <li>Practicalli: Web Scraping with Clojure - Hacker news</li> <li>Clojure Data Analysis Cookbook: Scraping data from tables in web pages</li> <li>ClojureVerse: First time webscraper, could you give any pointers?</li> <li>Web Scraping with Clojure - http-kit and Enlive</li> <li>How to Scrape Modern Websites Without Headless Browsers - Python</li> </ul>"},{"location":"data-mining/webscraping/#hintbe-respectful-of-data-sources","title":"Hint::Be Respectful of data sources","text":"<p>Avoid high number of requests to websites with unstructured data, they are unlikely to have much capacity to serve requests.  Consider downloading the content locally to minimise the requests to the website.</p>"},{"location":"data-mining/webscraping/enlive/","title":"Webscraping with Enlive","text":"<p>quickly selecting elements based on CSS and/or Xpath</p> <p>https://clojureverse.org/t/best-library-for-querying-html/1103</p> <pre><code>(require '[net.cgrand.enlive-html :as enlive])\n(let [doc (enlive/html-snippet \"&lt;div class='hello'&gt;Hello, &lt;em&gt;world&lt;em&gt;&lt;/div&gt;\")\nem  (enlive/select doc [:.hello :em])]\n(enlive/texts em))\n</code></pre>"},{"location":"data-mining/webscraping/enlive/#including-enlive","title":"Including Enlive","text":""},{"location":"data-mining/webscraping/enlive/#searching-for-tags","title":"Searching for tags","text":""},{"location":"data-mining/webscraping/table-data/","title":"Webscraping HTML table data","text":"<p>Data is often published using HTML tables, as its a very simple language that non-developers can easily pick up.</p>"},{"location":"data-mining/webscraping/table-data/#data-in-a-pre-tag","title":"Data in a pre tag","text":"<p>Using pre to create a table in a web page is similar to using a CSV except whitespace is used instead of commas to demarcated the individual elements.</p> <p>Data can be put into a vector, optionally grouping each line as a vector within a vector using <code>`partition</code>.</p> <p>If data should be associated with a name, then use the <code>map</code> function to convert the</p>"},{"location":"data-mining/webscraping/table-data/#example-data","title":"Example data","text":"<p>Tables without headings * Riverflow reconstructions for England and Wales - University of Eas Anglia Climactic Research Unit</p> <p>Tables with headings and comments * Cloud Cover by Country - University of Eas Anglia Climactic Research Unit</p>"},{"location":"data-transformation/","title":"Data Transformation","text":"<ul> <li>Clojure core functions for general data transformation</li> <li>TableCloth - create table based data structures for data science models</li> </ul>"},{"location":"data-transformation/tablecloth/","title":"Tablecloth","text":""},{"location":"data-transformation/tablecloth/#data-transformation-tablecloth","title":"Data Transformation - TableCloth","text":"<p>TableCloth - an abstractions library for tech.ml which is optomised to working with data in table form.  Data science projects often work with large data sets in table format.</p>"},{"location":"install/","title":"Install","text":"<p>Clojure CLI is used to run Clojure code and is extended by a wide range of community tools.</p> <p>A Clojure aware editor is highly recommended.  Practicalli uses the following</p> <ul> <li>Spacemacs - an extensive and easy to use Emacs configuration</li> <li>Neovim and Conjure - a lightweight and highly extensible modal editing experience</li> <li>Doom Emacs - a minimal Emacs configuration that is easily configurable</li> </ul> <p>Practialli Clojure provides an overview of Clojure editors available</p>"},{"location":"install/#install-clojure-cli","title":"Install Clojure CLI","text":"<p>Practicalli Clojure Install Guide</p> <p>Clojure CLI provide a simple and configurable way to:</p> <ul> <li>Run Clojure programs and tools</li> <li>Run an interactive REPL (Read-Eval-Print Loop) and evaluate Clojure expressions, usually with a Clojure aware editor</li> <li>Managing dependencies (via tools.deps) from Maven and Git repositories</li> </ul> <p>Using community tools on top of Clojure CLI tools provides tasks to create, develop, build and deploy Clojure applications and services</p> <p>Follow the Practicalli Clojure Install Guide to install Clojure and supporting tools.</p>"},{"location":"integration/python/","title":"Integration: Python","text":""},{"location":"integration/python/#references","title":"References","text":"<ul> <li>Clojure Interop With Python NLP Libraries</li> <li>Parens for Polyglog</li> </ul>"},{"location":"introduction/contributing/","title":"Contributing to Practicalli","text":"<p>Practicalli books are written in markdown and use MkDocs to generate the published website via a GitHub workflow.  MkDocs can also run a local server using the <code>make docs</code> target from the <code>Makefile</code></p> <p>By submitting content ideas and corrections you are agreeing they can be used in this book under the Creative Commons Attribution ShareAlike 4.0 International license.  Attribution will be detailed via GitHub contributors.</p> <p>All content and interaction with any persons or systems must be done so with respect and within the Practicalli Code of Conduct.</p>"},{"location":"introduction/contributing/#book-status","title":"Book status","text":""},{"location":"introduction/contributing/#submit-and-issue-or-idea","title":"Submit and issue or idea","text":"<p>If something doesnt seem quite right or something is missing from the book, please raise an issue via the GitHub repository explaining in as much detail as you can.</p> <p>Raising an issue before creating a pull request will save you and the maintainer time.</p>"},{"location":"introduction/contributing/#considering-a-pull-request","title":"Considering a Pull request?","text":"<p>Before investing any time in a pull request, please raise an issue explaining the situation.  This can save you and the maintainer time and avoid rejected pull requests.</p> <p>Please keep pull requests small and focused, as they are much quicker to review and easier to accept.  Ideally PR's should be for a specific page or at most a section.</p> <p>A PR with a list of changes across different sections will not be merged, it will be reviewed eventually though.</p>"},{"location":"introduction/contributing/#thank-you-to-everyone-that-has-contributed","title":"Thank you to everyone that has contributed","text":"<ul> <li>SciCloj community and Daniel Slutsky</li> <li>Dave Leepmann and Applied</li> <li>Clojure Data Science community on Zulip</li> </ul> <p>A huge thank you to Rich Hickey and the team at Cognitect for creating and continually guiding the Clojure language.  Special thank you to Alex Miller who has provided excellent advice on working with Clojure and the CLI tooling.</p> <p>The Clojure community has been highly supportive of everyone using Clojure and I'd like to thank everyone for the feedback and contributions.  I would also like to thank everyone that has joined in with the London Clojurins community, ClojureBridgeLondon, Clojurians Slack community, Clojurians Zulip community and Clojureverse community.</p> <p>Thank you to everyone who sponsors the Practicalli websites and videos and for the Clojurists Together sponsorship, it helps me continue the work at a much faster pace.</p> <p>Special thanks to Bruce Durling for getting me into Cloure in the first place.</p> <p></p>"},{"location":"introduction/data-science-books/","title":"Data Science books","text":"<p>There are many great data science books and Practicalli will curate a selection of books that are considered investing time into.</p>"},{"location":"introduction/data-science-books/#clojure-specific-data-science-books","title":"Clojure specific data science books","text":"<ul> <li>[Linear Algebra for Programmers]](https://aiprobook.com/numerical-linear-algebra-for-programmers/)</li> <li>Deep Learning for Programmers</li> <li>Clojure for Data Science</li> </ul>"},{"location":"introduction/data-science-books/#general-data-science-books","title":"General Data Science books","text":"<ul> <li>Python Data Science Handbook</li> <li>R for Data Science</li> </ul>"},{"location":"introduction/online-courses/","title":"Online Data Science Courses","text":"Course Math Level Language Tools Summary Practical Deep Learning for Coders High School Python Jupiter notebook AI Applications Without a PhD"},{"location":"introduction/persona/","title":"Persona","text":"<p>Persona help identify commonality of experience and approaches for people in the realm of data science and software engineering.</p>"},{"location":"introduction/persona/#jane-mid-level-clojure-developer","title":"Jane - mid-level Clojure developer","text":"<p>Jane is a Clojure developer with a couple of years commercial experience Jane has no data science experience She has a project to create a dashboard to visualise covid19 data for her company And has to find useful tools and data sources to build the dashboard</p> <p>An expanded version of the Jane Clojure developer persona:</p> <p>Jane is a Clojure developer with a couple of years commercial experience and a year prior to that as a hobby Jane has no data science experience but has seen TED talks and tutorials on visualising data Jane has a project to create a dashboard to visualise covid19 data for her company And has to find useful tools and data sources to build the dashboard Jane visits the Government website for the country she resides in and finds various data sets in JSON and CSV formats Jane choose to use Clojure CLI tools for the Clojure project to make use of the community tooling that helps visualise data as she is transforming it (Portal, Reveal) Jane uses Spacemacs (Emacs / Cider) as its is a tool she is familiar with and Cider has simple to use debug and data inspector tools. Jane started with LightTable but that project is no longer active. She has also tried VS Code and Calva, but Cider is more stable and mature, has more features and better structural editing support. The data wrangling libraries Jane is considering are clojure.data.json and clojure.data.csv as they are already included in Clojure Jane has heard of other libraries for manipulating data, but doesnt know if they are relevant or easy to use Jane will try using Oz for visualisations as she likes the idea of Vega &amp; Vega lite as a data language, because it reminds her of the approach taken with Clojure itself.</p>"},{"location":"introduction/persona/#jada-experienced-data-scientist","title":"Jada - experienced data scientist","text":"<p>Jada - statisticians - machine learning - visualisation - computer vision - ML Ops - Probabilistic ???</p> <p>Jamie is a analyst using data science for the last year as a company doing X and has completed X data science course and works with several more experienced data scientist who are using some python and R to build data models.</p> <p>Jenny is new to coding and has an interest in data science and machine learning and has no real experience in any of these. doesnt know what she doesnt know doesnt know where to start looking</p> <p>Jennifer has several years experience of R and Python (and occasionally wrangled a few C++ libraries) Jennifer is curious about Clojure because ??? - listened to a talk on Simple made Easy and wishes that R and Python would make some of the work simpler -</p>"},{"location":"introduction/repl-workflow/","title":"REPL Driven Development","text":"<p>Always be REPL'ing</p> <p>Coding without a REPL feels limiting. The REPL provides fast feedback from code as its crafted, testing assumptions and design choices every step of the journey to a solution  - John Stevenson, Practical.li</p> <p>Clojure is a powerful, fun and highly productive language for developing applications and services.  The clear language design is supported by a powerful development environment known as the REPL (read, evaluate, print, loop).  The REPL gives you instant feedback on what your code does and enables you to test either a single expression or run the whole application (including tests).</p> <p>REPL driven development is the foundation of working with Clojure effectively</p> <p>An effective Clojure workflow begins by running a REPL process.  Clojure expressions are written and evaluated immediately to provide instant feedback. The REPL feedback helps test the assumptions that are driving the design choices.</p> <ul> <li>Read - code is read by the Clojure reader, passing any macros to the macro reader which converts those macros into Clojure code.</li> <li>Evaluate - code is compiled into the host language (e.g. Java bytecode) and executed</li> <li>Print - results of the code are displayed, either in the REPL or as part of the application.</li> <li>Loop - the REPL is a continuous process that evaluates code, either a single expression or the whole application.</li> </ul> <p>Design decisions and valuable data from REPL experiments can be codified as specifications and unit tests</p> <p>Practicalli REPL Reloaded Workflow</p> <p>The principles of REPL driven development are implemented in practice using the Practicalli REPL Reloaded Workflow and supporting tooling.  This workflow uses Portal to inspect all evaluation results and log events, hot-load libraries into the running REPL process and reloads namespaces to support major refactor changes.</p>"},{"location":"introduction/repl-workflow/#evaluating-source-code","title":"Evaluating source code","text":"<p>A REPL connected editor is the primary tool for evaluating Clojure code from source code files, displaying the results inline.</p> <p>Source code is automatically evaluated in its respective namespace, removing the need to change namespaces in the REPL with (<code>in-ns</code>) or use fully qualified names to call functions.</p> <p> </p> Evaluate Clojure in a Terminal UI REPL <p>Entering expressions at the REPL prompt evaluates the expression immediately, returning the result directly underneath  </p>"},{"location":"introduction/repl-workflow/#rich-comment-blocks-living-documentation","title":"Rich Comment blocks - living documentation","text":"<p>The <code>(comment ,,,)</code> function wraps code that is only run directly by the developer using a Clojure aware editor.</p> <p>Expressions in rich comment blocks can represent how to use the functions that make up the namespace API.  For example, starting/restarting the system, updating the database, etc.  Expressions provide examples of calling functions with typical arguments and make a project more accessible and easier to work with.</p> <p>Clojure Rich Comment to manage a service</p> <pre><code>(ns practicalli.gameboard.service)\n(defn app-server-start [port] ,,,)\n(defn app-server-start [] ,,,)\n(defn app-server-restart [] ,,,)\n(defn -main\n\"Start the service using system components\"\n[&amp; options] ,,,)\n(comment\n(-main)\n(app-server-start 8888)\n(app-server-stop)\n(app-server-restart 8888)\n(System/getenv \"PORT\")\n(def environment (System/getenv))\n(def system-properties (System/getProperties))\n) ; End of rich comment block\n</code></pre> <p>Rich comment blocks are very useful for rapidly iterating over different design decisions by including the same function but with different implementations.  Hide clj-kondo linter warnings for redefined vars (<code>def</code>, <code>defn</code>) when using this approach.</p> <pre><code>;; Rich comment block with redefined vars ignored\n#_{:clj-kondo/ignore [:redefined-var]}\n(comment\n(defn value-added-tax []\n;; algorithm design - first try)\n(defn value-added-tax []\n;; algorithm design - second try)\n) ;; End of rich comment block\n</code></pre> <p>The \"Rich\" in the name is an honourary mention to Rich Hickey, the author and benevolent dictator of Clojure design.</p>"},{"location":"introduction/repl-workflow/#design-journal","title":"Design Journal","text":"<p>A journal of design decisions makes the code easier to understand and maintain.  Code examples of design decisions and alternative design discussions are captured, reducing the time spent revisiting those discussions.</p> <p>Journals simplify the developer on-boarding processes as the journey through design decisions are already documented.</p> <p>A Design Journal is usually created in a separate namespace, although it may start as a rich comment at the bottom of a namespace.</p> <p>A journal should cover the following aspects</p> <ul> <li>Relevant expressions use to test assumptions about design options.</li> <li>Examples of design choices not taken and discussions why (saves repeating the same design discussions)</li> <li>Expressions that can be evaluated to explain how a function or parts of a function work</li> </ul> <p>The design journal can be used to create meaningful documentation for the project very easily and should prevent time spent on repeating the same conversations.</p> <p>Example design journal</p> <p>Design journal for TicTacToe game using Reagent, ClojureScript and Scalable Vector Graphics</p>"},{"location":"introduction/repl-workflow/#viewing-data-structures","title":"Viewing data structures","text":"<p>Pretty print shows the structure of results from function calls in a human-friendly form, making it easier for a developer to parse and more likely to notice incorrect results.</p> <p>Tools to view and navigate code</p> <ul> <li> Cider inspector is an effective way to navigate nested data and page through large data sets.</li> <li> Portal Inspector to visualise many kinds of data in many different forms.</li> </ul> <p></p>"},{"location":"introduction/repl-workflow/#code-style-and-idiomatic-clojure","title":"Code Style and idiomatic Clojure","text":"<p>Clojure aware editors should automatically apply formatting that follows the  Clojure Style guide.</p> <p>Live linting with clj-kondo suggests common idioms and highlights a wide range of syntax errors as code is written, minimizing bugs and therefore speeding up the development process.</p> <p> </p> <p>Clojure LSP is build on top of clj-kondo</p> <p> Clojure LSP uses clj-kondo static analysis to provide a standard set of development tools (format, refactor, auto-complete, syntax highlighting, syntax &amp; idiom warnings, code navigation, etc).</p> <p>Clojure LSP can be used with any Clojure aware editor that provides an LSP client, e.g.  Spacemacs,  Doom Emacs,  Neovim, VSCode.</p> <p>Clojure Style Guide</p> <p>The  Clojure Style guide provides examples of common formatting approaches, although the development team should decide which of these to adopt.  Emacs <code>clojure-mode</code> will automatically format code and so will Clojure LSP (via cljfmt).  These tools are configurable and should be tailored to the teams standard.</p>"},{"location":"introduction/repl-workflow/#data-and-function-specifications","title":"Data and Function specifications","text":"<p> Clojure spec is used to define a contract on incoming and outgoing data, to ensure it is of the correct form.</p> <p>As data structures are identified in REPL experiments, create data specification to validate the keys and value types of that data.</p> <pre><code>;; ---------------------------------------------------\n;; Address specifications\n(spec/def ::house-number string?)\n(spec/def ::street string?)\n(spec/def ::postal-code string?)\n(spec/def ::city string?)\n(spec/def ::country string?)\n(spec/def ::additional string?)\n(spec/def ::address   ; Composite data specification\n(spec/keys\n:req-un [::street ::postal-code ::city ::country]\n:opt-un [::house-number ::additional]))\n;; ---------------------------------------------------\n</code></pre> <p>As the public API is designed, specifications for each functions arguments are added to validate the correct data is used when calling those functions.</p> <p> Generative testing provides a far greater scope of test values used incorporated into unit tests. Data uses clojure.spec to randomly generate data for testing on each test run.</p>"},{"location":"introduction/repl-workflow/#test-driven-development-and-repl-driven-development","title":"Test Driven Development and REPL Driven Development","text":"<p>Test Driven Development (TDD) and REPL Driven Development (RDD) complement each other as they both encourage incremental changes and continuous feedback.</p> <p>Test Driven Development fits well with Hammock Time, as good design comes from deep thought</p> <ul> <li>RDD enables rapid design experiments so different approaches can easily and quickly be evaluated .</li> <li>TDD focuses the results of the REPL experiments into design decisions, codified as unit tests.  These tests guide the correctness of specific implementations and provide critical feedback when changes break that design.</li> </ul> <p> Unit tests should support the public API of each namespace in a project to help prevent regressions in the code.  Its far more efficient in terms of thinking time to define unit tests as the design starts to stabilize than as an after thought.</p> <p><code>clojure.test</code> library is part of the Clojure standard library that provides a simple way to start writing unit tests.</p> <p> Clojure spec can also be used for generative testing, providing far greater scope in values used when running unit tests.  Specifications can be defined for values and functions.</p> <p>Clojure has a number of  test runners available.  Kaocha is a test runner that will run unit tests and function specification checks.</p> <p>Automate local test runner</p> <p>Use  kaocha test runner in watch mode to run tests and specification check automatically (when changes are saved) <pre><code>clojure -X:test/watch\n</code></pre></p>"},{"location":"introduction/repl-workflow/#continuous-integration-and-deployment","title":"Continuous Integration and Deployment","text":"<p>Add a  continuous integration service to run tests and builds code on every shared commit.  Spin up testable review deployments when commits pushed to a pull request branch, before pushing commits to the main deployment branch, creating an effective pipeline to gain further feedback.</p> <ul> <li> CircleCI provides a simple to use service that supports Clojure projects.</li> <li> GitHub Workflows and GitHub actions marketplace to quickly build a tailored continuous integration service, e.g. Setup Clojure GitHub Action.</li> <li> GitLab CI</li> </ul> <p></p>"},{"location":"introduction/repl-workflow/#live-coding-with-data-stuart-halloway","title":"Live Coding with Data - Stuart Halloway","text":"<p>There are few novel features of programming languages, but each combination has different properties. The combination of dynamic, hosted, functional and extended Lisp in Clojure gives developers the tools for making effective programs. The ways in which Clojure's unique combination of features can yield a highly effective development process.</p> <p>Over more than a decade we have developed an effective approach to writing code in Clojure whose power comes from composing many of its key features. As different as Clojure programs are from e.g. Java programs, so to can and should be the development experience. You are not in Kansas anymore!</p> <p>This talk presents a demonstration of the leverage you can get when writing programs in Clojure, with examples, based on my experiences as a core developer of Clojure and Datomic.</p> <p> </p>"},{"location":"introduction/what-is-clojure/","title":"What is Clojure?","text":"<p>Clojure is a general purpose programming language and is used for creating any applications, tools, services across any industry.</p> <p>Clojure is a hosted language, so it can run on a Java Virtual machine (especially for high volume data processing).  Clojure can also run on JavaScript engines found in web browsers and nodejs.</p> <p>Clojure has a very simple syntax and is simple to write and maintain.</p> <p>Clojure is very data centric and the standard library has over 500 functions for manipulating and transforming data, so is ideal for data science tasks.</p> <p>Practicalli Clojure will help you get started with Clojure and help you create a Clojure development environment with a Clojure aware editor.</p>"},{"location":"introduction/writing-tips/","title":"Writing tips for MkDocs","text":"<p>Making the docs more engaging using the mkdocs-material theme reference guide</p> Configuring Colors <p>Material for MkDocs - Changing the colors lists the primary and accent colors available.</p> <p>HSL Color Picker for codes to modify the theme style, overriding colors in <code>docs/assets/stylesheets/extra.css</code></p>"},{"location":"introduction/writing-tips/#hypertext-links","title":"Hypertext links","text":"<p>Links open in the same browser window/tab by default.</p> <p>Add <code>{target=_blank}</code> to the end of a link to configure opening in a new tab</p> <pre><code>[link text](url){target=_blank}\n</code></pre>"},{"location":"introduction/writing-tips/#buttons","title":"Buttons","text":"<p>Convert any link into a button by adding <code>{.md-button}</code> class names to end of the markdown for a link, which uses <code>.md-button-primary</code> by default.  Include <code>target=_blank</code> for buttons with links to external sites.</p> <pre><code>[link text](http://practical.li/blog){.md-button target=_blank}\n</code></pre> <p>Or specify a different class</p> <pre><code>[link text](http://practical.li/blog){.md-button .md-button-primary}\n</code></pre> <p>Add an icon to the button</p> <p> Practicalli Issues  Practicalli Blog</p> <pre><code>[:fontawesome-brands-github: Practicalli Issues](http://practical.li/blog){ .md-button .md-button-primary }\n[:octicons-heart-fill-24: Practicalli Blog](http://practical.li/blog){ .md-button .md-button-primary }\n</code></pre> <p>Search all supported icons</p>"},{"location":"introduction/writing-tips/#youtube-video","title":"YouTube video","text":"<p>Use an iframe element to include a YouTube video, wrapping in a paragraph tag with center alignment to place the video in a centered horizontal position</p> <pre><code>&lt;p style=\"text-align:center\"&gt;\n&lt;iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/rQ802kSaip4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/p&gt;\n</code></pre> <p>mkdocs material does not have direct support for adding a YouTube video via markdown.</p>"},{"location":"introduction/writing-tips/#admonitions","title":"Admonitions","text":"<p>Supported admonition types</p> <p>Note</p> <p>Use <code>!!!</code> followed by <code>NOTE</code></p> <p>Adding a title</p> <p>Use <code>!!!</code> followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p> <p>Shh, no title bar just the text... Use <code>!!!</code> followed by <code>NOTE</code> and a <code>\"\"</code> empty double quotes</p> <p>Abstract</p> <p>Use <code>!!!</code> followed by <code>ABSTRACT</code></p> <p>Info</p> <p>Use <code>!!!</code> followed by <code>INFO</code></p> <p>Tip</p> <p>Use <code>!!!</code> followed by <code>TIP</code></p> <p>Success</p> <p>Use <code>!!!</code> followed by <code>SUCCESS</code></p> <p>Question</p> <p>Use <code>!!!</code> followed by <code>QUESTION</code></p> <p>Warning</p> <p>Use <code>!!!</code> followed by <code>WARNING</code></p> <p>Failure</p> <p>Use <code>!!!</code> followed by <code>FAILURE</code></p> <p>Danger</p> <p>Use <code>!!!</code> followed by <code>DANGER</code></p> <p>Bug</p> <p>Use <code>!!!</code> followed by <code>BUG</code></p> <p>Example</p> <p>Use <code>!!!</code> followed by <code>EXAMPLE</code></p> <p>Quote</p> <p>Use <code>!!!</code> followed by <code>QUOTE</code></p>"},{"location":"introduction/writing-tips/#collapsing-admonitions","title":"Collapsing admonitions","text":"Note <p>Collapse those admonitions using <code>???</code> instead of <code>!!!</code></p> Replace with a title <p>Use <code>???</code> followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p> Expanded by default <p>Use <code>???+</code>, note the <code>+</code> character,  followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p>"},{"location":"introduction/writing-tips/#inline-blocks","title":"Inline blocks","text":"<p>Inline blocks of text to make a very specific callout within text</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Adding something to then end of text is probably my favourite</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"introduction/writing-tips/#code-blocks","title":"Code blocks","text":"<p>Code blocks include a copy icon automatically</p> <p>Syntax highlighting in code blocks</p> <pre><code>(defn my-function  ; Write a simple function\n\"With a lovely doc-string\"\n[arguments]\n(map inc [1 2 3]))\n</code></pre> <p>Give the code block a title using <code>title=\"\"</code> after the backtics and language name</p> src/practicalli/gameboard.clj<pre><code>(defn my-function\n\"With a lovely doc-string\"\n[arguments]\n(map inc [1 2 3]))\n</code></pre> <p>We all like line numbers, especially when you can set the starting line</p> src/practicalli/gameboard.clj<pre><code>(defn my-function\n\"With a lovely doc-string\"\n[arguments]\n(map inc [1 2 3]))\n</code></pre> <p>Add <code>linenums=42</code> to start line numbers from 42 onward</p> <pre><code>clojure linenums=\"42\" title=\"src/practicalli/gameboard.clj\"\n</code></pre>"},{"location":"introduction/writing-tips/#annotations","title":"Annotations","text":"<p>Annotations in a code block help to highlight important aspects.  Use the comment character for the language followed by a space and a number in brackets</p> <p>For example, in a shell code block, use <code># (1)</code> where 1 is the number of the annotation</p> <p>Use a number after the code block to add the text for the annotation, e.g. <code>1.</code>. Ensure there is a space between the code block and the annotation text.</p> <pre><code>ls -la $HOME/Downloads  # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted text, images, ... basically anything that can be written in Markdown.</li> </ol> <p>Code blocks with annotation, add <code>!</code> after the annotation number to suppress the <code>#</code> character</p> <pre><code>(defn helper-function\n\"Doc-string with description of function purpose\" ; (1)!\n[data]\n(merge {:fish 1} data)\n)\n</code></pre> <ol> <li>Always include a doc-string in every function to describe the purpose of that function, identifying why it was added and what its value is.</li> </ol> <p>GitHub action example with multiple annotations</p> <pre><code>name: ci # (1)!\non:\npush:\nbranches:\n- master # (2)!\n- main\npermissions:\ncontents: write\njobs:\ndeploy:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v3\n- uses: actions/setup-python@v4\nwith:\npython-version: 3.x\n- run: pip install mkdocs-material # (3)!\n- run: mkdocs gh-deploy --force\n</code></pre> <ol> <li> <p>You can change the name to your liking.</p> </li> <li> <p>At some point, GitHub renamed <code>master</code> to <code>main</code>. If your default branch     is named <code>master</code>, you can safely remove <code>main</code>, vice versa.</p> </li> <li> <p>This is the place to install further [MkDocs plugins] or Markdown     extensions with <code>pip</code> to be used during the build:</p> <pre><code>pip install \\\nmkdocs-material \\\nmkdocs-awesome-pages-plugin \\\n...\n</code></pre> </li> </ol>"},{"location":"introduction/writing-tips/#highlight-lines-in-code-blocks","title":"Highlight lines in code blocks","text":"<p>Add highlight line meta data to a code block after the opening backticks and code block language.</p> <p><code>hl_lines=\"2\"</code> highlights line 2 in the codeblock</p> <pre><code>(defn my-function\n\"With a lovely doc-string\"\n[arguments]\n(map\ninc\n[1 2 3]))\n</code></pre>"},{"location":"introduction/writing-tips/#embed-external-files","title":"Embed external files","text":"<p><code>--8&lt;--</code> in a code block inserts code from a source code file or other text file</p> <p>Specify a local file from the root of the book project (the directory containing mkdocs.yml)</p> Scheduled Version Check GitHub Workflow from source code file scheduled version check<pre><code>---\n# ------------------------------------------\n# Scheduled check of versions\n# - use as non-urgent report on versions\n# - Uses POSIX Cron syntax\n#   - Minute [0,59]\n#   - Hour [0,23]\n#   - Day of the month [1,31]\n#   - Month of the year [1,12]\n#   - Day of the week ([0,6] with 0=Sunday)\n#\n# Using liquidz/anta to check:\n# - GitHub workflows\n# - deps.edn\n# ------------------------------------------\nname: \"Scheduled Version Check\"\non:\nschedule:\n# - cron: \"0 4 * * *\" # at 04:04:04 ever day\n# - cron: \"0 4 * * 5\" # at 04:04:04 ever Friday\n- cron: \"0 4 1 * *\" # at 04:04:04 on first day of month\nworkflow_dispatch: # Run manually via GitHub Actions Workflow page\njobs:\nscheduled-version-check:\nname: \"Scheduled Version Check\"\nruns-on: ubuntu-latest\nsteps:\n- run: echo \"\ud83d\ude80 Job automatically triggered by ${{ github.event_name }}\"\n- run: echo \"\ud83d\udc27 Job running on ${{ runner.os }} server\"\n- run: echo \"\ud83d\udc19 Using ${{ github.ref }} branch from ${{ github.repository }} repository\"\n- name: \"Checkout code\"\nuses: actions/checkout@v3\n- run: echo \"\ud83d\udc19 ${{ github.repository }} repository was cloned to the runner.\"\n- name: \"Antq Check versions\"\nuses: liquidz/antq-action@main\nwith:\nexcludes: \"\"\nskips: \"boot clojure-cli pom shadow-cljs leiningen\"\n# Summary\n- run: echo \"\ud83c\udfa8 library versions checked with liquidz/antq\"\n- run: echo \"\ud83c\udf4f Job status is ${{ job.status }}.\"\n</code></pre> Practicalli Project Templates Emacs project configuration - .dir-locals.el<pre><code>((clojure-mode . ((cider-preferred-build-tool . clojure-cli)\n                  (cider-clojure-cli-aliases . \":build:test/env:dev/reloaded\"))))\n</code></pre> <p>Code example reuse</p> <p>Use an embedded local or external file (URL) when the same content is required in more than one place in the book.</p> <p>An effective way of sharing code and configuration mutliple times in a book or across multiple books.</p>"},{"location":"introduction/writing-tips/#content-tabs","title":"Content tabs","text":"<p>Create in page tabs that can also be</p> <p>Setting up a project</p> Clojure CLILeiningen <pre><code>clojure -T:project/new :template app :name practicalli/gameboard\n</code></pre> <pre><code>lein new app practicalli/gameboard\n</code></pre> <p>Or nest the content tabs in an admonition</p> <p>Run a terminal REPL</p> Clojure CLILeiningen <pre><code>clojure -T:repl/rebel\n</code></pre> <pre><code>lein repl\n</code></pre>"},{"location":"introduction/writing-tips/#diagrams","title":"Diagrams","text":"<p>Neat flow diagrams</p> <p>Diagrams - Material for MkDocs</p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <p>UML Sequence Diagrams</p> <pre><code>sequenceDiagram\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <p>state transition diagrams</p> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre> <p>Class diagrams - not needed for Clojure</p> <p>Entity relationship diagrams are handy though</p> <pre><code>erDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  LINE-ITEM {\n    customer-name string\n    unit-price int\n  }\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</code></pre>"},{"location":"introduction/writing-tips/#keyboard-keys","title":"Keyboard keys","text":"<p>Represent key bindings with Keyboard keys. Each number and alphabet character has their own key.</p> <ul> <li>1 <code>++1++</code> for numbers</li> <li>l <code>++\"l\"++</code> for lowercase character</li> <li>U <code>++u++</code> for uppercase character or <code>++\"U\"++</code> for consistency</li> </ul> <p>Punctionation keys use their name</p> <ul> <li>Space <code>++spc++</code></li> <li>, <code>++comma++</code></li> <li>Left <code>++arrow-left++</code></li> </ul> <p>For key sequences, place a space between each keyboard character</p> <ul> <li>Space g s <code>++spc++ ++\"g\"++ ++\"s\"++</code></li> </ul> <p>For key combinations, use join they key identifies with a <code>+</code></p> <ul> <li>Meta+X <code>++meta+x++</code></li> <li>Ctrl+Alt+Del <code>++ctrl+alt+del++</code></li> </ul> <p>MkDocs keyboard keys reference</p>"},{"location":"introduction/writing-tips/#images","title":"Images","text":"<p>Markdown images can be appended with material tags to set the size of the image, whether to appear on light or dark theme and support lazy image loading in browsers</p> SizeLazy LoadingAlignTheme SpecificAll Image Attributes <p><code>{style=\"height:150px;width:150px\"}</code> specifies the image size <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){style=\"height:150px;width:150px\"}\n</code></pre></p> <p></p> <p><code>{loading=lazy}</code> specifies an image should lazily load in the browser <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png){loading=lazy}\n</code></pre></p> <p><code>{aligh=left}</code> or <code>{aligh=right}</code> specifies the page alignment of an image. <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){align=right}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){align=right}\n</code></pre></p> <p>  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p><code>![Kitty Logo](image/kitty-light.png#only-dark)</code> or <code>![Kitty Logo](image/kitty-light.png#only-light)</code>  specifies the theme the image should be shown, allowing different versions of images to be shown based on the theme. <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){style=\"height:150px;width:150px\"}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){style=\"height:150px;width:150px\"}\n</code></pre> Use the theme toggle in the top nav bar to see the icon change between light and dark.  </p> <p>Requires the color pallet toggle</p> <p>Alight right, lazy load and set image to 150x150</p> <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){align=right loading=lazy style=\"height:64px;width:64px\"}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){align=right loading=lazy style=\"height:64px;width:64px\"}\n</code></pre> <p>  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"introduction/writing-tips/#lists","title":"Lists","text":"<p>Task lists</p> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul> <p>Task List example</p> <pre><code>- [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n- [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [ ] Praesent sed risus massa\n- [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n</code></pre>"},{"location":"introduction/writing-tips/#tooltips","title":"Tooltips","text":"<p>The humble tool tip</p> <p>Hover me</p> <p>with references</p> <p>Hover me</p> <p>Icon tool tip with a title</p> <p></p>"},{"location":"introduction/writing-tips/#abreviations","title":"Abreviations","text":"<p>The HTML specification is maintained by the W3C.</p> <p>[HTML]: Hyper Text Markup Language [W3C]: World Wide Web Consortium</p>"},{"location":"introduction/writing-tips/#magic-links","title":"Magic links","text":"<p>MagicLink can auto-link HTML, FTP, and email links. It can auto-convert repository links (GitHub, GitLab, and Bitbucket) and display them in a more concise, shorthand format.</p> <p>Email Practicalli</p> <p>Practicalli Neovim</p>"},{"location":"introduction/concepts/","title":"Concepts","text":"<p>Data engineering gathers and organises information in a form that is suitable for data science</p>"},{"location":"mathematics/","title":"Math Essentials","text":"<p>Data Science is an application of several fields of mathematics:</p> <ul> <li>Statistics &amp; Probability (process &amp; interpret data)</li> <li>Linear Algebra</li> <li>Mathematical Optimisation (solving puzzles by finding optimal solution)</li> <li>Calculus</li> </ul> <p>Mathematics uses these fields via experimental design (e.g. A/B testing), data processing and modelling.</p> <p>Quote</p> <p>Without mathematics there is no data science... only data - John Stevenson (and probably many others before)</p> <p> </p>"},{"location":"mathematics/#video-tutorials","title":"Video Tutorials","text":"<p>  Animated Mathematic Theory Explanations</p> Videos and Channels currently being reviewed by Practicalli <ul> <li>Data Science introduction - Free Code Camp</li> <li> Damsel in Data</li> <li> How to learn math for data science (the minimize effort maximize outcome way)</li> <li> Maths For Data Science - Geek's Lesson</li> <li> Thu Vu data analytics</li> <li> Mathematics, statistics for data science and machine learning</li> <li> <p>Sundas Khalid Data Science, Tech and Career Tips</p> </li> <li> <p>All Machine Learning Models Explained in 5 Minutes</p> </li> </ul>"},{"location":"mathematics/#resources","title":"Resources","text":"<ul> <li>Math for Clojurists</li> </ul>"},{"location":"mathematics/linear-algebra/","title":"Mathematics: Linear Algebra","text":"<p>Linear Algebra comprises of mathematical techniques that help efficiently calculate sums for large data sets</p> <ul> <li>dot product</li> <li>vectors</li> <li>matrix transformation</li> </ul>"},{"location":"mathematics/linear-algebra/#references","title":"References","text":"<ul> <li>Wikipedia: Linear Algebra</li> <li>Khan Academy</li> <li>MIT Open Courseware: Linear Algebra</li> <li>YouTube: Essence of Linear Algebra</li> <li>UC Davis: Linear Algebra</li> <li>FreeCodeCamp: Linear Algebra full college course part 1 and part 2</li> </ul>"},{"location":"natural-language/","title":"Natural Language Processing Introduction","text":"<p>Natural language processing comprises of a set of computational techniques to understand natural languages such as English, Spanish, Chinese, etc.</p> <p>Natural Language Processing (NLP) consists of a set of algorithms and tools so that machines can make sense of data available in natural (human) languages such as English, German, French, etc. Although there are traces of NLP research since a long time ago, the concept got well defined in the 1950s, with the breakthrough research work of Alan Turing and Noam Chomsky.</p> <p>The primary objectives are:</p> <ul> <li> <p>Understand and implement NLP techniques for sentiment classification, information retrieval (search engines) and topic modeling.</p> </li> <li> <p>Understand and implement NLP techniques for uncovering text syntax and structure. That is, predicting part-of-speech tags, parse tree structure, named-entities like people and places, etc.</p> </li> <li> <p>Understand and implement NLP techniques for some non-traditional topics such as language identification, spelling correction, and creating word clouds.</p> </li> <li> <p>Understand and implement deep learning methods for NLP (also called Deep NLP), and apply them to text generation and language translation. These methods represent the state-of-the-art for advanced tasks such as language translation, question answering, speech recognition and music composition and power systems like the Google Assistant and Amazon Alexa.</p> </li> </ul>"},{"location":"natural-language/#what-is-natural-language","title":"What is Natural Language?","text":"<p>Natural language refers to the medium in which humans communicate with each other. This could be in the form of writings (text) for example emails, articles, news, blogs, bank documents, etc or speech for example lectures, speeches, audio calls, etc. There are trillions of web pages full of natural text, so imagine the scale of data available today.</p> <p>NLP algorithms often model the hierarchical structure of natural language i.e. characters form words, words form phrases, phrases form sentences, sentences form paragraphs, and paragraphs form documents.</p>"},{"location":"natural-language/#applications-of-nlp","title":"Applications of NLP","text":"<p>Common NLP applications and use cases:</p> <p>Document Classification deals with classifying textual documents and assigning it one or multiple categories. Example applications include, classifying news articles into categories like sports, politics, business, technology, etc, or segregating different types of invoices and sales deeds in a large company.</p> <p>Document Clustering is used to find similar documents and segregate them to form groups. Documents that are closely related will be part of the same group. Example applications include finding similar questions that have already posted in a forum, or finding new published medical research related to a patient's symptoms.</p> <p>Sentiment Analysis is used to classify text for different sentiments ranging from negative to neutral to positive. This is commonly used to understand customer opinions from product reviews or their posts on social media.</p> <p>Document Summarization helps to extract the most important and central ideas in a document. For example, one could train a model to summarize a 3000 word article to 200 words. This allows the reader to save time and get the gist, and is often useful for news, research papers, etc.</p> <p>Named Entity Recognition, also known as entity extraction, identifies named entities and classifies them into categories such as person, organization, location, etc. Such a system can be used by stock investors to follow news corresponding to companies they have invested in, or to get news relating to your favorite sports players and teams from across various news sources.</p> <p>Question Answering systems are intelligent systems that generate responses to the questions being asked by the user. Such systems often use facts and rules stored in their knowledge base. Many conversational AI and personal assistant solutions (for example Amazon Alexa) are able to perform question answering.</p> <p>Machine Translation is the task of automatically translating from one natural language to another. This is the task Google translate is performing when you visit a website that is written in a language you do not understand.</p>"},{"location":"natural-language/#components-of-nlp","title":"Components of NLP","text":"<p>There are 2 main components of natural language processing - natural language understanding, and natural language generation.</p>"},{"location":"natural-language/#natural-language-understanding-nlu","title":"Natural Language Understanding (NLU)","text":"<p>NLU enables machines to understand the intent or the meaning of the text. The different levels of analysis that NLU requires are as follows:</p> <p>Morphological Analysis is the analysis of the structure of individual words. A morpheme is defined as the \"minimal unit of meaning\". For example, the words \"care\", \"cares\", \"caring\", \"careless\", \"careful\", \"uncaring\" are different forms of the same word, with stem \"care\". Also note that the structure of a word could include a prefix (\"un-\" in \"uncaring\") or a suffix (\"-less\" in \"careless\").</p> <p>Syntactic Analysis (also called parsing) involves analysis of words in the sentence for grammar. For example, syntactic analysis is used by Microsoft Word, Google Docs, etc to highlight phrases with incorrect grammar.</p> <p>Semantic Analysis uses morphological and syntactic knowledge to understand the meaning, intent and purpose of the text as a whole. For example, consider the two sentences \"I went to the market in my shorts\" vs \"I went to the market in the city\". In terms of grammar (syntax) the two sentences are equivalent. However, based on semantics (meaning), we know that \"in my shorts\" refers to \"I\", whereas \"in the city\" refers to the \"market\". Semantic analysis is necessary since grammar leaves a lot of ambiguity, and we implicitly rely on a shared understanding of the world to communicate with each other.</p> <p>Discourse Analysis is a more advanced stage of NLU where we perform syntactic or semantic analysis in a longer piece of text. That is, the analysis is performed over a paragraph or an entire document, as opposed to a single sentence.</p>"},{"location":"natural-language/#natural-language-generation-nlg","title":"Natural Language Generation (NLG)","text":"<p>Once the machine understands the natural language, NLG is used to respond in natural language, or to produce written text. Recent applications include chat-bots and personal assistants like Alexa and Siri. In general, NLG systems are more complex than NLU. Some approaches to NLG are:</p> <p>Content Determination involves deciding what information we need to convey in the generated text. There are pre-built schemas or templates to specify the content. Using knowledge-based rules and pattern detection, the words in these templates are predicted. For example, when Google Assistant is asked the age of a person, it responds \"{person_name} is {age} years old. {He/She} was born on {date}.\"</p> <p>Planning / Micro-planning involves finding, mixing and merging different sentence representations into more concise representation. For example, if the predicted response for an input is a set of 3 sentences - \"Larry is feeling sleepy\", \"Larry is drinking coffee\" and \"Coffee is hot\", a better concise representation would be \"Since Larry is sleepy, he is drinking hot coffee\".</p> <p>Deep Learning is a subfield within machine learning which has proven very successful in applications that require language generation, such as translation and question answering. The last section of this course covers Deep Learning methods for NLP. Whereas the above two approaches involve lots of hand-crafted rules, deep learning can be used in an 'end-to-end' fashion.</p>"},{"location":"natural-language/#challenges-in-nlp","title":"Challenges in NLP","text":"<p>The properties and nature of natural language bring many challenges to NLP. A few of these are discussed below:</p> <p>Assumed knowledge / common sense: By far the biggest challenge in NLP is that anytime we communicate, we have an inherent assumption about the knowledge the reader has. Even though this knowledge might seem very basic for a human, a computer does not have access to such knowledge. When we say \"Fox jumped over the fence\" vs \"Fox jumped over the building\" vs \"Fox jumped over the leaf\", we know that the first is sensible, second is not possible, and third is too insignificant (and hence weird) to mention. All of this depends on our understanding of a fox, a fence, a leaf, etc.</p> <p>Volume: A huge amount of text is available online, and in documents within organizations. This large amount of data is a great bonus for machine learning approaches to NLP, but at the same time, it requires our solutions to be computationally efficient.</p> <p>Variation: Natural language is infinitely wide in terms of vocabulary, dialects, etc. Understanding all these different types of languages and variations in dialects makes NLP much harder than having one standardized language across the globe.</p> <p>Complex: The way concepts link together to convey meaning is often quite complex for an algorithm to understand. For example, a large percentage of words have different meaning depending on the context in which they are used. Words like \"set\" and \"run\" have more than 300 definitions depending on context (homonyms). Consider the word \"having\" in \"Adam is having coffee\" vs \"Adam is having a good time\".</p> <p>Grammar is vague: Sometimes grammatical rules are not well defined, and often, there are exceptions to grammatical rules. Grammar also leaves ambiguity in possible meanings. We saw this in the \"I went to the market\" example above. Another example is, \"Robert really likes Michael. He is such a charming personality.\" Based on grammar alone, it is not possible to know whether \"he\" refers to \"Robert\" or \"Michael\".</p> <p>Expressions: Emotions or sarcasm in written text have proven quite difficult for an algorithm to understand. The literal meaning for \"I work 40 hours a week to be this poor\" is very different from the intended meaning.</p>"},{"location":"natural-language/#approaches-to-nlp","title":"Approaches to NLP","text":"<p>Broadly there are 3 different ways to approach any problem in NLP.</p> <p>Computational Linguistics It is the mathematical or scientific study of language. In this approach, classical linguists devised various language rules for grammar, part-of-speech, etc. The NLP algorithms are based on discrete mathematics such as automata, probability, and co-occurrence statistics of words. Most of the theories given by Noam Chomsky were based on computational linguistics.</p>"},{"location":"natural-language/#machine-learning","title":"Machine Learning","text":"<p>In machine learning approach, the text data is converted to a numerical vector. These vectors could be based on the frequency of words or how they co-occur with neighbouring words. One such meaningful representation is tf-idf, which we'll see in the next tutorial.</p> <p>Once the text is transformed to vectors, machine learning algorithms such as Naive Bayes', Support Vector Machine, etc. can be used to classify text data or perform other tasks.</p> <p>Machine learning methods for NLP have now become so popular that they have mostly taken over computational linguistics. The fact that substantial amount of text is now available to train accurate models is an important contributing factor to this development. The other factor for inclination towards machine learning is that rule-based systems are difficult to scale because the exclusive hand-crafted rules are required for each natural language, while machine learning can be adopted easily across different languages.</p>"},{"location":"natural-language/#deep-learning","title":"Deep Learning","text":"<p>Deep learning is a subfield of machine learning focused on training models that are more complex and flexible than traditional machine learning models. These methods have achieved state-of-the-art results in problems such as translation and question answering. The increase in processing power and availability of large amounts of textual data has enabled us to train deep neural networks and achieve high accuracy.</p>"},{"location":"natural-language/#conclusion","title":"Conclusion","text":"<p>In the upcoming tutorials, we will encounter many of the applications, approaches and challenges described in this article. Wishing you a happy journey in exploring natural language processing. :)</p>"},{"location":"notebooks/","title":"Clojure Data Science tooling: Notebooks","text":"<p>Notebooks are interactive documents that include executable code and its results.  They are a form of literate programming.</p> <p>For over 30 years data scientists have used notebooks for experiments, exploration of data and communicating insights to other data scientist and businesses.</p> <p>Software engineers can also use notebooks for development, providing fast feedback and a consistent way to visualise data.</p> <p>Open source notebooks include Jupyter (formerly known as iPython) and Apache Zeppelin.</p> <p>Hosted offerings include Deepnote, Noteable, Databricks Collaborative Notebooks, Google Colab, Jovian.ml, among others.</p> <p>Notebooks are programming language specific or support code for multiple languages like Polynote.</p>"},{"location":"notebooks/#clojure-notebooks","title":"Clojure Notebooks","text":"<ul> <li>NextJournal - hosted platform, written in Clojure, supports multiple programming languages</li> <li>Notespace -</li> <li>Clerk - Clojure based notebook focused on local development (not yet released)</li> <li>Pink Gorilla</li> </ul>"},{"location":"notebooks/#hintwolfram-mathematica-first-computational-notebook","title":"Hint::Wolfram Mathematica - first computational notebook","text":"<p>On June 23 1988 Stephan Wolfram first released Wolfram Mathematica that allow machine learning, statistics, symbolic computation, manipulating matrices, plotting functions and various types of data, implementation of algorithms, creation of user interfaces, and interfacing with programs written in other programming languages.</p>"},{"location":"notebooks/clerk/","title":"Notebooks: Clerk","text":"<p>The soon to be released Clerk project is a notebook that is designed with local development as its main focus.</p>"},{"location":"notebooks/clerk/#clojured-presentation","title":"ClojureD presentation","text":""},{"location":"notebooks/clerk/#references","title":"References","text":"<ul> <li>Clerk author Martin Kavalar</li> </ul>"},{"location":"notebooks/next-journal/","title":"Notbooks: NextJournal","text":"<p>NextJournal is a hosted Journal with wide support for programming languages (Clojure, Python, Scala, etc.).</p> <p>The NextJournal platform has been developed with Clojure.</p> <p>Enjoy Version Control, Simple Sharing and Collaboration. Set Up Your Data Science Project Within Minutes. Simple Collaboration. Cloud Computing. Features: Automatic Provisioning &amp; Shutdown, Data &amp; Secrets Management, Rapid And Full Reusability.</p> <p>Runs anything you can put into a Docker container. Improve your workflow with polyglot notebooks, automatic versioning and real-time collaboration. Save time and money with on-demand provisioning, including GPU support.</p> <p></p>"},{"location":"notebooks/notespace/","title":"Notespace - data science journal","text":"<p>Notespace generates a data science journal from a Clojure namespace, to give a simple to use literate programming experience.</p> <p>The notespace introduction shows how to create a Clojure namespace into a notespace.  Clojure values, generative functions, markdown and graphics are defined using <code>notespace.kinds</code> as meta-data on Clojure expressions in the namespace.</p> <p>Run notespace listening to all changes, or just show a particular view (useful for large notespace) or even just update a line.</p>"},{"location":"notebooks/notespace/#example-project-with-notespace","title":"Example project with notespace","text":"<p>Use the example Notespace project which contains simple examples and also launches an empty notespace webpage and Portal data inspector window on REPL startup.</p> <p>Start a REPL for the project with Leiningen or Clojure CLI tools (version 1.10.1.697 or greater and aliases from practicalli/clojure-deps-edn)</p> <pre><code>lein repl\n\nclojure -M:env/dev:inspect/portal\n</code></pre> <p>Wait a few seconds for the Portal and Notespace pages to load into your browser.</p> <p>Evaluate the <code>(notespace/listen)</code> expression and the current namespace is loaded into the Notespace page.  If the Notespace page stops updating, evaluate this expression again.</p> <p>Wrap values and function calls with the <code>tap&gt;</code> function to see the values in the Portal window.</p>"},{"location":"notebooks/notespace/#hintemacs-support-clojure-cli-tools","title":"Hint::Emacs support - Clojure CLI tools","text":"<p>the example Notespace project contains a <code>.dir-locals.el</code> file for Clojure CLI tools, using the <code>:env/dev</code> and <code>:inspect/portal-cli</code> aliases from practicalli/clojure-deps-edn user level configuration.</p> <p>When running <code>cider-jack-in</code> the aliases are automatically added to jack-in startup command.</p>"},{"location":"notebooks/notespace/configure-notespace-project/","title":"Configure project","text":""},{"location":"notebooks/notespace/configure-notespace-project/#run-notespace-on-repl-startup","title":"Run Notespace on REPL startup","text":"<p>Example Notespace project is a project with simple examples and also launches an empty notespace webpage on REPL startup.</p> <p>{% tabs deps=\"Clojure CLI tools\", lein=\"Leiningnen\" %}</p> <p>{% content \"deps\" %} Use a deps.edn file that includes the <code>scicloj/notespace</code> library</p>"},{"location":"notebooks/notespace/configure-notespace-project/#creating-a-new-project","title":"Creating a new project","text":"<p>Use Clojure CLI tools (:project/new) to create a project.</p> <pre><code>clojure -X:project/new :template app :name practicalli/notespace-demo\n</code></pre> <p>Edit the <code>deps.edn</code> file</p> <p>Add <code>scicloj/notespace</code> library as dependency</p> <p>Use practicalli/clojure-deps-edn user configuration or add an <code>:env/dev</code> and <code>:inspect/portal-clj</code> aliases to the project <code>deps.edn</code> file</p> <pre><code>{:paths [\"src\" \"resources\"]\n :deps\n {org.clojure/clojure {:mvn/version \"1.10.1\"}\n  scicloj/notespace   {:mvn/version \"3-alpha3-SNAPSHOT\"}}\n :aliases\n {:env/dev {:extra-paths [\"dev\"]}\n  :inspect/portal-cli {:extra-deps {djblue/portal {:mvn/version \"0.6.4\"}}}}}\n</code></pre> <p>{% content \"lein\" %}</p>"},{"location":"notebooks/notespace/configure-notespace-project/#creating-a-new-project_1","title":"Creating a new project","text":"<p>Use Leinigen to create a new project</p> <pre><code>lein new app practicalli/notespace-demo\n</code></pre> <p>Edit the project.clj file</p> <p>Add notespace as a dependency to the project configuration</p> <p>add a <code>:dev</code> profile with <code>:resource-paths</code> which adds the <code>dev</code> directory to class path.  Leiningen uses the <code>:dev</code> profile unless another profile is specified.</p> <pre><code>(defproject practicalli/notespace-demo \"0.1.0-SNAPSHOT\"\n  :description \"Notespace journal - simple demo\"\n  :url \"https://practicalli.github.io/data-science/notebooks/notespace/\"\n  :license {:name \"Creative Commons Attribution Share-Alike 4.0 International\"\n            :url  \"https://creativecommons.org\"}\n  :dependencies [[org.clojure/clojure \"1.10.1\"]\n                 [scicloj/notespace \"3-alpha3\"]]\n  :main ^:skip-aot practicalli.notespace-demo\n  :target-path \"target/%s\"\n  :profiles {:dev     {:resource-paths [\"dev\"]\n                       :dependencies   [[djblue/portal \"0.6.4\"]]}\n             :uberjar {:aot :all}})\n</code></pre> <p>{% endtabs %}</p>"},{"location":"notebooks/notespace/configure-notespace-project/#add-namespace-to-start-notespace-with-repl","title":"Add namespace to start notespace with REPL","text":"<p>Create a <code>dev/user.clj</code> source code file</p> <p>Add a <code>user</code> namespace definition that requires notespace and portal</p> <p>Add a call to start notespace</p> <p>Add a call to start Portal and connect it to the REPL as a tap&gt; source</p> <p>Add notespace and portal helper functions</p> <pre><code>(ns user\n  (:require [notespace.api :as notespace]\n            [portal.api :as inspect]))\n\n;; Start Notespace\n(notespace/init-with-browser)\n\n;; Start Portal\n;; Open a portal inspector window using default nord theme\n(inspect/open {:portal.colors/theme :portal.colors/solarized-light})\n\n;; Add portal as a tap&gt; target\n(inspect/tap)\n\n(comment\n\n  ;; Notespace helpers\n  ;;;;;;;;;;;;;;;;;;;;;;\n\n  ;; Initialise notespace, headless or open browser\n  (notespace/init)\n  (notespace/init-with-browser)\n\n  ;; Portal helpers\n  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n  ;; Open Portal window with nord theme (default)\n  (inspect/open)\n\n  ;; Open Portal window with solarized-dark theme\n  (inspect/open {:portal.colors/theme :portal.colors/solarized-dark})\n\n  ;; Open Portal window with solarized-light theme\n  (inspect/open {:portal.colors/theme :portal.colors/solarized-light})\n\n  ;; Clear all values in the portal inspector window\n  (inspect/clear)\n\n  ;; Close the portal window\n  (inspect/close)\n\n  ) ;; End of rich comment block\n</code></pre>"},{"location":"notebooks/notespace/configure-notespace-project/#run-a-repl-for-the-project","title":"Run a REPL for the project","text":"<p>{% tabs depsstart=\"Clojure CLI tools\", leinstart=\"Leiningnen\" %}</p> <p>{% content \"depsstart\" %} Open a terminal and run a REPL using the <code>:env/dev</code> and <code>:inspect/portal-cli</code> aliases</p> <pre><code>clojure -M:env/dev:inspect/portal-cli\n</code></pre> <p>{% content \"leinstart\" %} Open a terminal and start a REPL with Leinigen, using the <code>:dev</code> profile by default</p> <pre><code>lein repl\n</code></pre> <p>{% endtabs %}</p>"},{"location":"r/","title":"R","text":"<p>R is a programming language...</p>"},{"location":"reference/","title":"Reference","text":"<p>Terminology, useful background information and external links.</p>"},{"location":"visualisation/","title":"Visualisation","text":"<ul> <li>telling stories</li> <li>plotting graphs</li> <li>Oz</li> <li>Hanami</li> </ul>"}]}